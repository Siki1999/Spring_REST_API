package com.rest.entity;

import jakarta.persistence.*;

import java.io.Serializable;

/**
 * Represents a product entity in the system.
 * <p>
 * Stores product information including pricing in EUR and availability status.
 * Price in USD is not stored into database because we use HNB API to convert price in EUR to USD.
 * Persisted in the database through JPA annotations.
 */
@Entity
@Table(name = "products")
public class Product implements Serializable {

    /**
     * Unique identifier generated by the database
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false, unique = true)
    private final Long id;

    /**
     * Unique product code (max 10 characters)
     */
    @Column(name = "code", nullable = false, unique = true, length = 10)
    private String code;

    /**
     * Product display name
     */
    @Column(name = "name", nullable = false)
    private String name;

    /**
     * Price in Euros
     */
    @Column(name = "price_eur", nullable = false)
    private Double priceEur;

    /**
     * Availability status (default: true)
     */
    @Column(name = "is_available", nullable = false)
    private Boolean isAvailable = true;

    /**
     * Constructs an empty Product with null ID
     */
    public Product() {this(null);};

    /**
     * Constructs a Product with specified parameters
     * @param id Database identifier
     * @param code Product code
     * @param name Product name
     * @param priceEur Product price in Euros
     * @param isAvailable Product availability status
     */
    public Product(final Long id, final String code, final String name, final Double priceEur, final Boolean isAvailable) {
        this.id = id;
        this.code = code;
        this.name = name;
        this.priceEur = priceEur;
        this.isAvailable = isAvailable;
    }

    /**
     * Constructs a Product with specified ID
     * @param id Database identifier
     */
    public Product(final Long id) {
        this.id = id;
    }

    /**
     * Returns the unique identifier of the product.
     *
     * @return Long value representing the product's ID
     */
    public Long getId() {
        return id;
    }

    /**
     * @return Product code
     */
    public String getCode() {
        return code;
    }

    /**
     * @param code Product code (required)
     */
    public void setCode(final String code) {
        this.code = code;
    }

    /**
     * @return Product name
     */
    public String getName() {
        return name;
    }

    /**
     * @param name Product name (required)
     */
    public void setName(final String name) {
        this.name = name;
    }

    /**
     * @return Price in Euros
     */
    public Double getPriceEur() {
        return priceEur;
    }

    /**
     * @param priceEur Price in Euros (required)
     */
    public void setPriceEur(final Double priceEur) {
        this.priceEur = priceEur;
    }

    /**
     * @return Availability status
     */
    public Boolean getAvailable() {
        return isAvailable;
    }

    /**
     * @param available Availability status
     */
    public void setAvailable(final Boolean available) {
        isAvailable = available;
    }
}
